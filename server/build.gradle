apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.openapi.generator'
apply plugin: 'com.google.protobuf'


group 'ru.merann.bopopov.autoshowroom'
version '2.0-RELEASE'
// TODO: Make server executable jar
sourceCompatibility = 1.8

configurations {
    rest
    all {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
}

repositories {
    mavenCentral()
    jcenter()
    maven {
        url 'https://repo.spring.io/libs-snapshot'
    }
}

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.1.3.RELEASE")
        classpath "org.openapitools:openapi-generator-gradle-plugin:3.3.4"
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.8'
    }
}

dependencies {
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.boot:spring-boot-starter-web-services"
    implementation "org.apache.cxf:cxf-spring-boot-starter-jaxws:3.3.1"
    implementation "wsdl4j:wsdl4j"
    implementation "org.projectlombok:lombok"
    implementation "org.liquibase:liquibase-core"
    implementation "com.h2database:h2"
    implementation "io.springfox:springfox-swagger-ui:2.9.2"
    implementation "io.springfox:springfox-swagger2:2.9.2"
    implementation "org.apache.cxf:cxf-spring-boot-starter-jaxrs:3.3.1"
    implementation "org.apache.cxf:cxf-rt-rs-service-description-openapi-v3:3.3.1"
    implementation "org.springframework.boot:spring-boot-starter-log4j2"
    implementation "com.microsoft.sqlserver:mssql-jdbc:7.2.1.jre8"
    implementation 'org.postgresql:postgresql:42.6.0'
    implementation "io.github.lognet:grpc-spring-boot-starter:3.3.0"
}

openApiGenerate {
    generatorName = "spring"
    inputSpec = "$projectDir/src/main/resources/autoshowroom.yaml".toString()
    outputDir = "$projectDir".toString()
    apiPackage = ("ru.merann.bopopov.autoshowroom.server.rs.api").toString()
    skipOverwrite = true;
    invokerPackage = ("ru.merann.bopopov.autoshowroom.server.rs").toString()
    modelPackage = ("ru.merann.bopopov.autoshowroom.server.model").toString()
    modelFilesConstrainedTo = [
            "Error"
    ]
    configOptions = [
            dateLibrary: "java8"
    ]
    systemProperties = [
            apis           : "",
            models         : "",
            supportingFiles: ""
    ]
}

openApiValidate {
    inputSpec = "$projectDir/src/main/resources/autoshowroom.yaml".toString()
}

springBoot {
    mainClassName = 'ru.merann.bopopov.autoshowroom.server.ServerApp'
}

sourceSets {
    main {
        java {
            srcDirs += "$buildDir/generated/source/proto/main/grpc"
            srcDirs += "$buildDir/generated/source/proto/main/java"
        }
    }
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.7.1"
    }
    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.21.0'
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}

//compileJava.dependsOn tasks.openApiGenerate